#!/bin/bash 
#set -x

############################################################################
# Script to play a Shofar blast for the start of Shabbat among other things
#
# Depends:	libhdate 1.4.20-4
#		at, sed. mpg123, amixer, espeak
#
#  See the Talmud in Shabbat 35b for shofar blast times and types, below is a quick over view.
# The Gemara in Masechet Shabbat (35b) describes a custom that was observed each week before Shabbat in Jewish communities during Talmudic times. 
# A person would climb onto the rooftop of a tall building in the town and blow six Shofar blasts. 
# Specifically, he would twice blow the series of Teki’a-Teru’a-Teki’a. The Gemara explains the significance of each Shofar blast. 
# The first, for example, served as a warning to the farmers working in the fields outside the city that they must put down their tools and start making their way back home to prepare for Shabbat. 
# The second Shofar blast alerted the shopkeepers in the city that the time has come to close their stores, and the third indicated the time to light the Shabbat candles. The final Shofar blasts indicated the onset of Shabbat. 
# The person blowing the Shofar would then put down the Shofar and come down from the rooftop, as Shabbat begun.
# Tekiah ― one long, straight blast
# Shevarim ― three medium, wailing sounds
# Teruah ― 9 quick blasts in short succession
#


# We need to setup the working path.  Some of the file paths are hard coded.


##### Constants

lat=44.786	#44.786 l
long=-85.042	#85.042 L  @#$@#$ changes from a + number to - number with hdate 1.4.20-4
tz="$( date +%:::z )"
day=()  # should be the numerical value of the day
month=()
year=()
Day=()  # should be the abreviated name of the day as in Mon
havdalah=()

##### Functions

# Not currently used and maybe this one and the next should be combined into a single function

#function Long
#{
  # longitude for Kalkaska, MI.  At some point we will make this interactive to pull the gps cordinates off a website per your current address, or set through a config file.  (-L switch for hdate)
#  -85.042
#}

# Not currently used

#function Lat
#{
  # latitude for Kalkaska, MI.  At some point we will make this interactive to pull the gps cordinates off a website per your current address, or set through a config file.  (-l switch for hdate)
#  44.786
#}

# Not currently used

#function Tz
#{
  # time zone for Kalkaska, MI.  At some point we will make this interactive using the gps cordinnates to determine what the time should be or set through a config file.
#  -5
#}

# pretty sure this is a useless function. Not sure why I have it, but I do know there was a reason at the time.  May have something to do with hdate not being sundown aware when this was first writen.

function Day_of_week #set the day of the week
{
Day="$( date +%a )"
     if [[ "$Day" != "Fri" ]]; then
          Day="$( date -d "next fri" +%a )"
     fi
}

function Set_date
{
  # Get the current date and set the the variables day, month, year.
read Day day month year <<<"$( date +"%a %d %m %Y" )"
#echo "$Day"
#exit
  if [[ "Fri" != "$Day" ]]; then
    read day month year <<<"$( date +"%d %m %Y" -d "next Fri" )"
    Day=Fri
  fi
}

function Set_shabbat
{

# Will need to be made aware that hdate has been made sundown aware

day="$(date -d "next sat" +%d)"
}

function Torah_reading {
Set_shabbat
parsha="$(hdate -r $day $month $year)"

# Add an audio section to play a recording of the actual reading at a specific time (to be determined) on Shabbat.

# There are .ods (libre office) files in the /data directory now that have the readings.
# I am sure there are naming inconsistencies in the reading names.
# There are also separation character inconsistencies between the fields in the files.

# So we do something like this

#check Shabbat reading or Yom Tove reading.
#	take readings value and find its listing for the whole reading in the csv file
#	take the value of that listing and grab the audio file and schedule it to run on the Shabbat (time to be determined and set in the config).
#	take reading's haftarah and find its listing in the csv file
#	take the value of that listing and grab the audio file and schedule it to run on the Shabbat (time to be determined and set in the config).
#	take reading's maftir and find its listing in the csv file
#	take the value of that listing and grab the audio file and schedule it to run on the Shabbat after the afternoon service but before Havdalah (time to be determined and set in the config).
#	Then schedule the individual aliyah's to be played with a listing of what it is displayed in a terminal/console window.
#	1 after Havdalah of the previous Shabbat but before bed time
#	2 on sunday morning (time to be determined and set in the config)
#	3 on monday morning (time to be determined and set in the config)
#	4 on tuseday morning (time to be determined and set in the config)
#	5 on wensday morning (time to be determined and set in the config)
#	6 on thursday morning (time to be determined and set in the config)
#	7 on firday morning (time to be determined and set in the config)


echo "The Parsha for "$parsha""
}

  function Havdalah
{
  havdalah="$(hdate -c -L$long -l$lat -z$tz $day $month $year)"
  echo "Havdalah time for; "$havdalah""
  hTime="$(hdate -c -L$long -l$lat -z$tz $day $month $year | awk -F"havdalah:" '{printf("%s\n",$2)}')"
  at "$hTime" "$month/$day/$year" -f "$HOME"/bin/shabbat/data/havdalah
}

#function Yom_Tove_Havdalah  # hdate does not calculate Yom-Tove start and stop times
#{
#  Time="$(hdate -s -L$long -l$lat -z$tz $day $month $year)"
#  	take sunset time and add 40 min for the time.
#  echo "Candle lighting time for; "$Time""
#}

function Candle_time # For Shabbat, will not work for Yom Tove
{
  Time="$(hdate -c -L$long -l$lat -z$tz $day $month $year)"
  echo "Candle lighting time for; "$Time""
}

#function Yom_Tove_Candle_time
#{
#  Time="$(hdate -s -L$long -l$lat -z$tz $day $month $year)"
#  	take sunset time and subtract 20 min from for the time.
#  echo "Candle lighting time for; "$Time""
#}

function Shofar
{

#Day_of_week # not sure why I had this in here it's not used.	

# We need to make a test to see if the shofar blast is already set.
# We need to pause or cancel any other sound apps before the shofar and then restart them after.
# We need to determine the proper combination of the three different shofar blasts to use when called.
# Will probably require a table/list.
# We need to separate shofar from being Shabbat specific

cTime="$(hdate -c -L$long -l$lat -z$tz $day $month $year | grep -e '(.' | cut -d " " -f2 | sed 's/[()]//g')"
at "$cTime" "$month/$day/$year" -f "$HOME"/bin/shabbat/data/shofar

#  from the current working candleTime
#cTime="$(hdate -c -L$long -l$lat -z$tz $day $month $year | awk -F"lighting:" '{printf("%s\n",$2)}')"
#at "$cTime" "$month/$day/$year" -f "$HOME"/bin/shabbat/data/shofar

}

# Not currently used

#function Yom_Tove 	# Festival
#{
## test date for Yom Tove
# hdate -h -L$long -l$lat -z$tz $day $month $year
# if it is a Yom Tove 
#	then Yom_Tove_Candle_time
# 	     Torah_reading
#	     Yom_Tove_Havdalah
# fi
#}

# Not currently used  SEE Torah_reading

#function Yom_tove_reading
#{
## need to build a table/list of Yom Tove readings
#
#}

# Not currently used

#function Rosh_chodesh		# New Moon
#{
## test date for Rosh Chodesh
# something like
# hdate -L$long -l$lat -z$tz $day $month $year
#	then check if the hebrew day is 29
#		if yes then add 1 to $day and check again.
#		if hebrew day is 1 
#			then it is Rosh Chodesh and we do thingys
#		else add 1 to $day and check again
#		if hebrew day is 1 
#			then it is Rosh Chodesh and we do thingys
#			else error
#}

# Not currently used

#function Count_omer	# count fifty days between Passover and Shavuot
#{
## count the Omer 
# We must count both seven weeks and fifty days so there are actually two countings. (50th day is Shavuot)
# play reminder to count the Omer morning & evening
# play an audio file containing the blessing and the actual count

# something like
# is `hdate -L$long -l$lat -z$tz $day $month $year` between 16 Nisan and 5 Sivan (49 days)
# then hdate -o -L$long -l$lat -z$tz $day $month $year
#	and do thingys specific to the count.
#		like "today is the 13th day of the Omer which makes 1 week and 6 days of the Omer.  Blessed are you HaShem our G0d King of the universe who has commaneded us to count the Omer"
#}

# Not currently used

#function Daf-yomi
#{
# Daily page a day Talmud reading 7 year cycle.
# We prablably want to anounce what the reading is first and have it output in a terminal
# then play an audio recording of the tractate.
# audio files available at http://www.dafyomi.org/ and http://www.ou.org/torah/dafyomi
# saving the downloaded files would be a good thing for future reference or listening.
#}

# Not currently used

#function Radio
#{
#  need to determine what is the best time to start the radio.
# lets use 1 hour befor candle lighting time to start.
# should be changeable in the config file

#rTime="$(hdate -c -L$long -l$lat -z$tz $day $month $year | grep -e '(.' | cut -d " " -f2 | sed #'s/[()]//g')"

#mpg123 http://216.118.106.247:7000
#}

# Not currently used

#function Internet_access
#{
# In order for this to be truly usefull the script needs to run on a host that can actually restrict internet access.

# we need to shut off internet access prior to candle lighting time.  Say 5 min before.
#But we want to keep our ability to have online radio from JM-in -the-AM (both the 32k and 128k streams)
# We also don't want to distroy our local networks functionality.

# iptables -F
# iptables -A INPUT -p tcp -s 216.118.106.247 --dport 7000 -j ACCEPT
# iptables -A INPUT -p tcp -s 216.118.106.247 --dport 443 -j ACCEPT
# restart radio
# After Havdalah we need to re-establish full internet access
# /etc/init.d/arno-iptables-firewall restart
#}


#function 
#{
#
#}


###### Main
clear
Set_date
  if [ "$Day" == "Fri" ]; then 
    Candle_time
    Shofar
    Torah_reading
  fi
Havdalah
Shofar
#Radio
# cron job to rerun the script for the next week

